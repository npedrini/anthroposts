/* * This Code is heavily influenced by the NodeBox Colors Library.  * See http://nodebox.net/code/index.php/Colors and http://nodebox.net *  * Ported and rewritten in 2009 by Philipp Laeubli and licensed under GPL.  * See LICENSE.txt for details. *  * Copyright (c) 2009 Philipp Laeubli * Original NodeBox Colors Library: Tom De Smedt, Frederic De Bleser * */package ch.badmojo.color {	/**	 * @author phil	 */	public class ColorTool {		public static function convertToRGBfromHex(hexColor : uint) : Array {			var res : Array = new Array();			res[0] = hexColor >> 16 & 0xFF;			res[1] = hexColor >> 8 & 0xFF;			res[2] = hexColor & 0xFF;			return res;		}		public static function convertToHexFromRGB(red : Number, green : Number, blue : Number) : uint {			return (red << 16 | green << 8 | blue);		}		public static function convertToHexFromArray(redgreenblue : Array) : uint {			var rgb : String = "0x" + redgreenblue[0].toString(16) + redgreenblue[1].toString(16) + redgreenblue[2].toString(16);						return new Number(rgb);		}		public static function convertColorRGBToHSV(color : Color) : Array {			return convertRGBToHSV(color.getRed(), color.getGreen(), color.getBlue());		}		// http://www.koders.com/python/fidB2FE963F658FE74D9BF74EB93EFD44DCAE45E10E.aspx		public static function convertHSVToRGB(h : Number,s : Number, v : Number) : Array {			s = s / 100;			v = v / 100;						var i : Number;			var f : Number; 			var p : Number;			var q : Number;			var t : Number;			var red : Number = 0;			var green : Number = 0;			var blue : Number = 0;			if( s == 0 ) {				// achromatic (grey)				red = green = blue = v;				return new Array(red * 255, green * 255, blue * 255);			}			if(h > 360) {				h = h - 360;			}			if(h < 0) {				h = 360 + h;			}			h = h / 60;						// sector 0 to 5			i = Math.floor(h);			f = h - i;						// factorial part of h			p = v * ( 1 - s );			q = v * ( 1 - s * f );			t = v * ( 1 - s * ( 1 - f ) );			switch( i ) {				case 0:					red = v;					green = t;					blue = p;					break;				case 1:					red = q;					green = v;					blue = p;					break;				case 2:					red = p;					green = v;					blue = t;					break;				case 3:					red = p;					green = q;					blue = v;					break;				case 4:					red = t;					green = p;					blue = v;					break;				default:							// case 5:					red = v;					green = p;					blue = q;					break;			}			return new Array(red * 255, green * 255, blue * 255);		}		public static function convertRGBToHSV(red : Number,green : Number,blue : Number) : Array {			red = red / 255;			green = green / 255;			blue = blue / 255;			var min : Number;			var max : Number;			var delta : Number;			min = Math.min(red, green, blue);			max = Math.max(red, green, blue);			var v : Number = max;							// v			var h : Number;			delta = max - min;			var s : Number;			if( max != 0 ) {				s = delta / max;		// s			} else {				// r = g = b = 0		// s = 0, v is undefined				s = 0;				h = -1;				return new Array(h, s * 100, v);			}			if( red == max ) {				h = ( green - blue ) / delta;		// between yellow & magenta			}else if( green == max ) {					h = 2 + ( blue - red ) / delta;	// between cyan & yellow			} else {				h = 4 + ( red - green ) / delta;	// between magenta & cyan			}			h *= 60;							// degrees			if( h < 0 ) {				h += 360;			}			return new Array(h, s * 100, v * 100);		}	}}